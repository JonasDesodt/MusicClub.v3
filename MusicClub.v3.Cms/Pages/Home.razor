@page "/"
@using MusicClub.v3.Cms.Controllers
@using MusicClub.v3.Cms.Models.Plotly
@using MusicClub.v3.Cms.Models.ViewModels
@using System.Globalization

@attribute [Authorize(Policy = "ValidTokenOnly")]

@inject IActService ActApiService;
@inject DataController DataController;
@inject IJSRuntime JsRuntime;

<PageTitle>Home</PageTitle>

<h2>
    <Image ImageDataResponse="homeViewModel?.PersonDataResponse.ImageDataResponse" />

    <span>
        Welcome,
        <AuthorizeView>
            <Authorized> @context.User.Identity?.Name</Authorized>
            <NotAuthorized> Stranger</NotAuthorized>
        </AuthorizeView>
    </span>
</h2>

<section>
    <h3>Upcoming acts</h3>

    @if (homeViewModel?.UpcomingActDataResponses is { Count: > 0 } upcomingActDataResponses)
    {
        <ul>
            @foreach (var actDataResponse in upcomingActDataResponses)
            {
                <li>
                    <a href="">
                        @(actDataResponse.Start?.ToLocalTime() ?? actDataResponse.LineupDataResponse.Doors.ToLocalTime())

                        <span>@actDataResponse.Name</span>
                    </a>
                </li>
            }
        </ul>
    }
    else
    {
        <p>There are no acts planned.</p>
    }

    <a href="" class="button">Show all</a>
</section>

<section>
    <h3>Acts you last worked on</h3>

    @if (homeViewModel?.UpdatedActDataResponses is { Count: > 0 } updatedActDataResponses)
    {
        <ul>
            @foreach (var actDataResponse in updatedActDataResponses)
            {
                <li>
                    <a href="">
                        @actDataResponse.Updated.ToLocalTime()

                        <span>@actDataResponse.Name</span>
                    </a>
                </li>
            }
        </ul>
    }
    else
    {
        <p>You have not done any work yet.</p>
    }

    <a href="" class="button">Show all</a>
</section>

<section>
    <h3>Statistics</h3>

    <div id="attendance_per_month" style="width:100%;max-width:700px"></div>
</section>

@code {
    private HomeViewModel? homeViewModel;

    protected override async Task OnInitializedAsync()
    {
        homeViewModel = (HomeViewModel?)DataController.Data;

        if (homeViewModel is null)
        {
            return;
        }

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && homeViewModel is not null)
        {
            var attendancePerMonthStatisticsResponse = homeViewModel.AttendancePerMonthStatisticsResponse;

            var data = new LineGraphData
                {
                    X = attendancePerMonthStatisticsResponse.Statistics.Select(x => new DateTimeFormatInfo().GetMonthName(x.Key + 1)).ToList(),
                    Y = attendancePerMonthStatisticsResponse.Statistics.Select(y => y.Value).ToList(),
                    Mode = "lines"
                };

            await JsRuntime.InvokeVoidAsync("Plotly.newPlot", "attendance_per_month", new[] { data }, new Layout { Title = "Attendance per month" });
        }

        await base.OnAfterRenderAsync(firstRender);
    }
}
